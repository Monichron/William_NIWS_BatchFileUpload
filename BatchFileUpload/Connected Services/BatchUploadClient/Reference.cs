//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatchFileUpload.BatchUploadClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LimitResponse", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    [System.SerializableAttribute()]
    public partial class LimitResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatchFileUpload.BatchUploadClient.Errors ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatchFileUpload.BatchUploadClient.Limits LimitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatchFileUpload.BatchUploadClient.Errors Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatchFileUpload.BatchUploadClient.Limits Limits {
            get {
                return this.LimitsField;
            }
            set {
                if ((object.ReferenceEquals(this.LimitsField, value) != true)) {
                    this.LimitsField = value;
                    this.RaisePropertyChanged("Limits");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Errors", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    [System.SerializableAttribute()]
    public partial class Errors : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Limits", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    [System.SerializableAttribute()]
    public partial class Limits : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DailyLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LineLimitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DailyLimit {
            get {
                return this.DailyLimitField;
            }
            set {
                if ((this.DailyLimitField.Equals(value) != true)) {
                    this.DailyLimitField = value;
                    this.RaisePropertyChanged("DailyLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LineLimit {
            get {
                return this.LineLimitField;
            }
            set {
                if ((this.LineLimitField.Equals(value) != true)) {
                    this.LineLimitField = value;
                    this.RaisePropertyChanged("LineLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MerchantStatementSourceStatusResponse", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    [System.SerializableAttribute()]
    public partial class MerchantStatementSourceStatusResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CreditCardsProcessedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CreditCardsProcessed {
            get {
                return this.CreditCardsProcessedField;
            }
            set {
                if ((this.CreditCardsProcessedField.Equals(value) != true)) {
                    this.CreditCardsProcessedField = value;
                    this.RaisePropertyChanged("CreditCardsProcessed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MandateOptions.MandateDebitFrequency", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    public enum MandateOptionsMandateDebitFrequency : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monthly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bimonthly = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ThreeMonthly = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SixMonthly = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Annually = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weekly = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Biweekly = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MandateOptions.MandatePublicHolidayOption", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    public enum MandateOptionsMandatePublicHolidayOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrecedingOrdinaryBusinessDay = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VeryNextOrdinaryBusinessDay = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MandateOptions.BankAccountType", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    public enum MandateOptionsBankAccountType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Current = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Savings = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transmission = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PredefinedPayment = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MandateOptions.Title", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    public enum MandateOptionsTitle : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mr = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mrs = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Miss = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dr = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Prof = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ms = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rabbi = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ds = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Adv = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 10,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NIWSResponseContainer", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BatchFileUpload.BatchUploadClient.AddMandateResponse))]
    public partial class NIWSResponseContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddMandateResponse", Namespace="http://schemas.datacontract.org/2004/07/NC.DG.TMS.C.WCF.NIWS")]
    [System.SerializableAttribute()]
    public partial class AddMandateResponse : BatchFileUpload.BatchUploadClient.NIWSResponseContainer {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MandateUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] WarningsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MandateUrl {
            get {
                return this.MandateUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.MandateUrlField, value) != true)) {
                    this.MandateUrlField = value;
                    this.RaisePropertyChanged("MandateUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Warnings {
            get {
                return this.WarningsField;
            }
            set {
                if ((object.ReferenceEquals(this.WarningsField, value) != true)) {
                    this.WarningsField = value;
                    this.RaisePropertyChanged("Warnings");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BatchUploadClient.INIWS_NIF")]
    public interface INIWS_NIF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/GetPaymentLimits", ReplyAction="http://tempuri.org/INIWS_NIF/GetPaymentLimitsResponse")]
        BatchFileUpload.BatchUploadClient.LimitResponse GetPaymentLimits(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/GetPaymentLimits", ReplyAction="http://tempuri.org/INIWS_NIF/GetPaymentLimitsResponse")]
        System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.LimitResponse> GetPaymentLimitsAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/GetDebitLimits", ReplyAction="http://tempuri.org/INIWS_NIF/GetDebitLimitsResponse")]
        BatchFileUpload.BatchUploadClient.LimitResponse GetDebitLimits(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/GetDebitLimits", ReplyAction="http://tempuri.org/INIWS_NIF/GetDebitLimitsResponse")]
        System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.LimitResponse> GetDebitLimitsAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/AccountFundsRelease", ReplyAction="http://tempuri.org/INIWS_NIF/AccountFundsReleaseResponse")]
        string AccountFundsRelease(string ServiceKey, string Date, long AmountInCents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/AccountFundsRelease", ReplyAction="http://tempuri.org/INIWS_NIF/AccountFundsReleaseResponse")]
        System.Threading.Tasks.Task<string> AccountFundsReleaseAsync(string ServiceKey, string Date, long AmountInCents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestActionDate", ReplyAction="http://tempuri.org/INIWS_NIF/RequestActionDateResponse")]
        string RequestActionDate(string ServiceKey, string Date, string Instruction, string ForwardActionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestActionDate", ReplyAction="http://tempuri.org/INIWS_NIF/RequestActionDateResponse")]
        System.Threading.Tasks.Task<string> RequestActionDateAsync(string ServiceKey, string Date, string Instruction, string ForwardActionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestInterimMerchantStatement", ReplyAction="http://tempuri.org/INIWS_NIF/RequestInterimMerchantStatementResponse")]
        string RequestInterimMerchantStatement(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestInterimMerchantStatement", ReplyAction="http://tempuri.org/INIWS_NIF/RequestInterimMerchantStatementResponse")]
        System.Threading.Tasks.Task<string> RequestInterimMerchantStatementAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestMerchantStatement", ReplyAction="http://tempuri.org/INIWS_NIF/RequestMerchantStatementResponse")]
        string RequestMerchantStatement(string ServiceKey, string FromActionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestMerchantStatement", ReplyAction="http://tempuri.org/INIWS_NIF/RequestMerchantStatementResponse")]
        System.Threading.Tasks.Task<string> RequestMerchantStatementAsync(string ServiceKey, string FromActionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveMerchantStatement", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveMerchantStatementResponse")]
        string RetrieveMerchantStatement(string ServiceKey, string PollingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveMerchantStatement", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveMerchantStatementResponse")]
        System.Threading.Tasks.Task<string> RetrieveMerchantStatementAsync(string ServiceKey, string PollingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestTransactionTypes", ReplyAction="http://tempuri.org/INIWS_NIF/RequestTransactionTypesResponse")]
        string RequestTransactionTypes(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestTransactionTypes", ReplyAction="http://tempuri.org/INIWS_NIF/RequestTransactionTypesResponse")]
        System.Threading.Tasks.Task<string> RequestTransactionTypesAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveTransactionTypes", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveTransactionTypesResponse")]
        string RetrieveTransactionTypes(string ServiceKey, string PollingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveTransactionTypes", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveTransactionTypesResponse")]
        System.Threading.Tasks.Task<string> RetrieveTransactionTypesAsync(string ServiceKey, string PollingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/LegacyCompactBatchFileUpload", ReplyAction="http://tempuri.org/INIWS_NIF/LegacyCompactBatchFileUploadResponse")]
        string LegacyCompactBatchFileUpload(string UserName, string Password, string PIN, string File, string ProcessAsLegacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/LegacyCompactBatchFileUpload", ReplyAction="http://tempuri.org/INIWS_NIF/LegacyCompactBatchFileUploadResponse")]
        System.Threading.Tasks.Task<string> LegacyCompactBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/LegacyBatchFileUpload", ReplyAction="http://tempuri.org/INIWS_NIF/LegacyBatchFileUploadResponse")]
        string LegacyBatchFileUpload(string UserName, string Password, string PIN, string File, string ProcessAsLegacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/LegacyBatchFileUpload", ReplyAction="http://tempuri.org/INIWS_NIF/LegacyBatchFileUploadResponse")]
        System.Threading.Tasks.Task<string> LegacyBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/BatchFileUpload", ReplyAction="http://tempuri.org/INIWS_NIF/BatchFileUploadResponse")]
        string BatchFileUpload(string ServiceKey, string File);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/BatchFileUpload", ReplyAction="http://tempuri.org/INIWS_NIF/BatchFileUploadResponse")]
        System.Threading.Tasks.Task<string> BatchFileUploadAsync(string ServiceKey, string File);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestFileUploadReport", ReplyAction="http://tempuri.org/INIWS_NIF/RequestFileUploadReportResponse")]
        string RequestFileUploadReport(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestFileUploadReport", ReplyAction="http://tempuri.org/INIWS_NIF/RequestFileUploadReportResponse")]
        System.Threading.Tasks.Task<string> RequestFileUploadReportAsync(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestCombinedUploadReportForDate", ReplyAction="http://tempuri.org/INIWS_NIF/RequestCombinedUploadReportForDateResponse")]
        string RequestCombinedUploadReportForDate(string ServiceKey, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestCombinedUploadReportForDate", ReplyAction="http://tempuri.org/INIWS_NIF/RequestCombinedUploadReportForDateResponse")]
        System.Threading.Tasks.Task<string> RequestCombinedUploadReportForDateAsync(string ServiceKey, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestCreditDataReport", ReplyAction="http://tempuri.org/INIWS_NIF/RequestCreditDataReportResponse")]
        string[] RequestCreditDataReport(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestCreditDataReport", ReplyAction="http://tempuri.org/INIWS_NIF/RequestCreditDataReportResponse")]
        System.Threading.Tasks.Task<string[]> RequestCreditDataReportAsync(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestAVSReport", ReplyAction="http://tempuri.org/INIWS_NIF/RequestAVSReportResponse")]
        string RequestAVSReport(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestAVSReport", ReplyAction="http://tempuri.org/INIWS_NIF/RequestAVSReportResponse")]
        System.Threading.Tasks.Task<string> RequestAVSReportAsync(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestPayNowInvoice", ReplyAction="http://tempuri.org/INIWS_NIF/RequestPayNowInvoiceResponse")]
        string RequestPayNowInvoice(string serviceKey, string fileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestPayNowInvoice", ReplyAction="http://tempuri.org/INIWS_NIF/RequestPayNowInvoiceResponse")]
        System.Threading.Tasks.Task<string> RequestPayNowInvoiceAsync(string serviceKey, string fileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/IsValidServiceKey", ReplyAction="http://tempuri.org/INIWS_NIF/IsValidServiceKeyResponse")]
        string[] IsValidServiceKey(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/IsValidServiceKey", ReplyAction="http://tempuri.org/INIWS_NIF/IsValidServiceKeyResponse")]
        System.Threading.Tasks.Task<string[]> IsValidServiceKeyAsync(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/AccountServiceKeys", ReplyAction="http://tempuri.org/INIWS_NIF/AccountServiceKeysResponse")]
        string[] AccountServiceKeys(string MethodKey, string AccountNo, int SoftwareVendorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/AccountServiceKeys", ReplyAction="http://tempuri.org/INIWS_NIF/AccountServiceKeysResponse")]
        System.Threading.Tasks.Task<string[]> AccountServiceKeysAsync(string MethodKey, string AccountNo, int SoftwareVendorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/MerchantStatementSourceStatus", ReplyAction="http://tempuri.org/INIWS_NIF/MerchantStatementSourceStatusResponse")]
        BatchFileUpload.BatchUploadClient.MerchantStatementSourceStatusResponse MerchantStatementSourceStatus(string ServiceKey, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/MerchantStatementSourceStatus", ReplyAction="http://tempuri.org/INIWS_NIF/MerchantStatementSourceStatusResponse")]
        System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.MerchantStatementSourceStatusResponse> MerchantStatementSourceStatusAsync(string ServiceKey, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestDebitBatchUnauthorised", ReplyAction="http://tempuri.org/INIWS_NIF/RequestDebitBatchUnauthorisedResponse")]
        string RequestDebitBatchUnauthorised(string ServiceKey, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestDebitBatchUnauthorised", ReplyAction="http://tempuri.org/INIWS_NIF/RequestDebitBatchUnauthorisedResponse")]
        System.Threading.Tasks.Task<string> RequestDebitBatchUnauthorisedAsync(string ServiceKey, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveBatchStatus", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveBatchStatusResponse")]
        string RetrieveBatchStatus(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveBatchStatus", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveBatchStatusResponse")]
        System.Threading.Tasks.Task<string> RetrieveBatchStatusAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveUnauthorisedBatches", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveUnauthorisedBatchesResponse")]
        string RetrieveUnauthorisedBatches(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveUnauthorisedBatches", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveUnauthorisedBatchesResponse")]
        System.Threading.Tasks.Task<string> RetrieveUnauthorisedBatchesAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestBatchAuthorise", ReplyAction="http://tempuri.org/INIWS_NIF/RequestBatchAuthoriseResponse")]
        string RequestBatchAuthorise(string ServiceKey, System.Guid BatchIndicator, bool SendEmail, string FromName, string FromAddress, bool SendSMS, bool ReleaseFunds, bool BankTransfer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestBatchAuthorise", ReplyAction="http://tempuri.org/INIWS_NIF/RequestBatchAuthoriseResponse")]
        System.Threading.Tasks.Task<string> RequestBatchAuthoriseAsync(string ServiceKey, System.Guid BatchIndicator, bool SendEmail, string FromName, string FromAddress, bool SendSMS, bool ReleaseFunds, bool BankTransfer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestMandateData", ReplyAction="http://tempuri.org/INIWS_NIF/RequestMandateDataResponse")]
        string RequestMandateData(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RequestMandateData", ReplyAction="http://tempuri.org/INIWS_NIF/RequestMandateDataResponse")]
        System.Threading.Tasks.Task<string> RequestMandateDataAsync(string ServiceKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveMandateData", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveMandateDataResponse")]
        string RetrieveMandateData(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveMandateData", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveMandateDataResponse")]
        System.Threading.Tasks.Task<string> RetrieveMandateDataAsync(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveMandatePDF", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveMandatePDFResponse")]
        string RetrieveMandatePDF(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/RetrieveMandatePDF", ReplyAction="http://tempuri.org/INIWS_NIF/RetrieveMandatePDFResponse")]
        System.Threading.Tasks.Task<string> RetrieveMandatePDFAsync(string ServiceKey, string FileToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/AddMandate", ReplyAction="http://tempuri.org/INIWS_NIF/AddMandateResponse")]
        BatchFileUpload.BatchUploadClient.AddMandateResponse AddMandate(
                    string ServiceKey, 
                    string AccountReference, 
                    string MandateName, 
                    decimal MandateAmount, 
                    bool IsConsumer, 
                    string FirstName, 
                    string Surname, 
                    string TradingName, 
                    string RegistrationNumber, 
                    string RegisteredName, 
                    string MobileNumber, 
                    BatchFileUpload.BatchUploadClient.MandateOptionsMandateDebitFrequency DebitFrequency, 
                    int CommencementMonth, 
                    string CommencementDay, 
                    string AgreementDate, 
                    string AgreementReferenceNumber, 
                    System.Nullable<int> CancellationNoticePeriod, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsMandatePublicHolidayOption> PublicHolidayOption, 
                    string Notes, 
                    string Field1, 
                    string Field2, 
                    string Field3, 
                    string Field4, 
                    string Field5, 
                    string Field6, 
                    string Field7, 
                    string Field8, 
                    string Field9, 
                    System.Nullable<bool> AllowVariableDebitAmounts, 
                    System.Nullable<int> BankDetailType, 
                    string BankAccountName, 
                    string BankAccountNumber, 
                    string BranchCode, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsBankAccountType> BankAccountType, 
                    string CreditCardToken, 
                    System.Nullable<int> CreditCardType, 
                    System.Nullable<int> ExpiryMonth, 
                    System.Nullable<int> ExpiryYear, 
                    System.Nullable<bool> IsIdNumber, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsTitle> Title, 
                    string EmailAddress, 
                    string PhoneNumber, 
                    string DateOfBirth, 
                    string DecemberDebitDay, 
                    string DebitMasterfileGroup, 
                    string PhysicalAddressLine1, 
                    string PhysicalAddressLine2, 
                    string PhysicalAddressLine3, 
                    string PhysicalSuburb, 
                    string PhysicalCity, 
                    string PhysicalProvince, 
                    string PhysicalPostalCode, 
                    System.Nullable<bool> MandateActive, 
                    System.Nullable<bool> RequestAVS, 
                    string AVSCheckNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INIWS_NIF/AddMandate", ReplyAction="http://tempuri.org/INIWS_NIF/AddMandateResponse")]
        System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.AddMandateResponse> AddMandateAsync(
                    string ServiceKey, 
                    string AccountReference, 
                    string MandateName, 
                    decimal MandateAmount, 
                    bool IsConsumer, 
                    string FirstName, 
                    string Surname, 
                    string TradingName, 
                    string RegistrationNumber, 
                    string RegisteredName, 
                    string MobileNumber, 
                    BatchFileUpload.BatchUploadClient.MandateOptionsMandateDebitFrequency DebitFrequency, 
                    int CommencementMonth, 
                    string CommencementDay, 
                    string AgreementDate, 
                    string AgreementReferenceNumber, 
                    System.Nullable<int> CancellationNoticePeriod, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsMandatePublicHolidayOption> PublicHolidayOption, 
                    string Notes, 
                    string Field1, 
                    string Field2, 
                    string Field3, 
                    string Field4, 
                    string Field5, 
                    string Field6, 
                    string Field7, 
                    string Field8, 
                    string Field9, 
                    System.Nullable<bool> AllowVariableDebitAmounts, 
                    System.Nullable<int> BankDetailType, 
                    string BankAccountName, 
                    string BankAccountNumber, 
                    string BranchCode, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsBankAccountType> BankAccountType, 
                    string CreditCardToken, 
                    System.Nullable<int> CreditCardType, 
                    System.Nullable<int> ExpiryMonth, 
                    System.Nullable<int> ExpiryYear, 
                    System.Nullable<bool> IsIdNumber, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsTitle> Title, 
                    string EmailAddress, 
                    string PhoneNumber, 
                    string DateOfBirth, 
                    string DecemberDebitDay, 
                    string DebitMasterfileGroup, 
                    string PhysicalAddressLine1, 
                    string PhysicalAddressLine2, 
                    string PhysicalAddressLine3, 
                    string PhysicalSuburb, 
                    string PhysicalCity, 
                    string PhysicalProvince, 
                    string PhysicalPostalCode, 
                    System.Nullable<bool> MandateActive, 
                    System.Nullable<bool> RequestAVS, 
                    string AVSCheckNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INIWS_NIFChannel : BatchFileUpload.BatchUploadClient.INIWS_NIF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NIWS_NIFClient : System.ServiceModel.ClientBase<BatchFileUpload.BatchUploadClient.INIWS_NIF>, BatchFileUpload.BatchUploadClient.INIWS_NIF {
        
        public NIWS_NIFClient() {
        }
        
        public NIWS_NIFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NIWS_NIFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NIWS_NIFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NIWS_NIFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BatchFileUpload.BatchUploadClient.LimitResponse GetPaymentLimits(string ServiceKey) {
            return base.Channel.GetPaymentLimits(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.LimitResponse> GetPaymentLimitsAsync(string ServiceKey) {
            return base.Channel.GetPaymentLimitsAsync(ServiceKey);
        }
        
        public BatchFileUpload.BatchUploadClient.LimitResponse GetDebitLimits(string ServiceKey) {
            return base.Channel.GetDebitLimits(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.LimitResponse> GetDebitLimitsAsync(string ServiceKey) {
            return base.Channel.GetDebitLimitsAsync(ServiceKey);
        }
        
        public string AccountFundsRelease(string ServiceKey, string Date, long AmountInCents) {
            return base.Channel.AccountFundsRelease(ServiceKey, Date, AmountInCents);
        }
        
        public System.Threading.Tasks.Task<string> AccountFundsReleaseAsync(string ServiceKey, string Date, long AmountInCents) {
            return base.Channel.AccountFundsReleaseAsync(ServiceKey, Date, AmountInCents);
        }
        
        public string RequestActionDate(string ServiceKey, string Date, string Instruction, string ForwardActionDate) {
            return base.Channel.RequestActionDate(ServiceKey, Date, Instruction, ForwardActionDate);
        }
        
        public System.Threading.Tasks.Task<string> RequestActionDateAsync(string ServiceKey, string Date, string Instruction, string ForwardActionDate) {
            return base.Channel.RequestActionDateAsync(ServiceKey, Date, Instruction, ForwardActionDate);
        }
        
        public string RequestInterimMerchantStatement(string ServiceKey) {
            return base.Channel.RequestInterimMerchantStatement(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<string> RequestInterimMerchantStatementAsync(string ServiceKey) {
            return base.Channel.RequestInterimMerchantStatementAsync(ServiceKey);
        }
        
        public string RequestMerchantStatement(string ServiceKey, string FromActionDate) {
            return base.Channel.RequestMerchantStatement(ServiceKey, FromActionDate);
        }
        
        public System.Threading.Tasks.Task<string> RequestMerchantStatementAsync(string ServiceKey, string FromActionDate) {
            return base.Channel.RequestMerchantStatementAsync(ServiceKey, FromActionDate);
        }
        
        public string RetrieveMerchantStatement(string ServiceKey, string PollingId) {
            return base.Channel.RetrieveMerchantStatement(ServiceKey, PollingId);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveMerchantStatementAsync(string ServiceKey, string PollingId) {
            return base.Channel.RetrieveMerchantStatementAsync(ServiceKey, PollingId);
        }
        
        public string RequestTransactionTypes(string ServiceKey) {
            return base.Channel.RequestTransactionTypes(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<string> RequestTransactionTypesAsync(string ServiceKey) {
            return base.Channel.RequestTransactionTypesAsync(ServiceKey);
        }
        
        public string RetrieveTransactionTypes(string ServiceKey, string PollingId) {
            return base.Channel.RetrieveTransactionTypes(ServiceKey, PollingId);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveTransactionTypesAsync(string ServiceKey, string PollingId) {
            return base.Channel.RetrieveTransactionTypesAsync(ServiceKey, PollingId);
        }
        
        public string LegacyCompactBatchFileUpload(string UserName, string Password, string PIN, string File, string ProcessAsLegacy) {
            return base.Channel.LegacyCompactBatchFileUpload(UserName, Password, PIN, File, ProcessAsLegacy);
        }
        
        public System.Threading.Tasks.Task<string> LegacyCompactBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy) {
            return base.Channel.LegacyCompactBatchFileUploadAsync(UserName, Password, PIN, File, ProcessAsLegacy);
        }
        
        public string LegacyBatchFileUpload(string UserName, string Password, string PIN, string File, string ProcessAsLegacy) {
            return base.Channel.LegacyBatchFileUpload(UserName, Password, PIN, File, ProcessAsLegacy);
        }
        
        public System.Threading.Tasks.Task<string> LegacyBatchFileUploadAsync(string UserName, string Password, string PIN, string File, string ProcessAsLegacy) {
            return base.Channel.LegacyBatchFileUploadAsync(UserName, Password, PIN, File, ProcessAsLegacy);
        }
        
        public string BatchFileUpload(string ServiceKey, string File) {
            return base.Channel.BatchFileUpload(ServiceKey, File);
        }
        
        public System.Threading.Tasks.Task<string> BatchFileUploadAsync(string ServiceKey, string File) {
            return base.Channel.BatchFileUploadAsync(ServiceKey, File);
        }
        
        public string RequestFileUploadReport(string ServiceKey, string FileToken) {
            return base.Channel.RequestFileUploadReport(ServiceKey, FileToken);
        }
        
        public System.Threading.Tasks.Task<string> RequestFileUploadReportAsync(string ServiceKey, string FileToken) {
            return base.Channel.RequestFileUploadReportAsync(ServiceKey, FileToken);
        }
        
        public string RequestCombinedUploadReportForDate(string ServiceKey, string Date) {
            return base.Channel.RequestCombinedUploadReportForDate(ServiceKey, Date);
        }
        
        public System.Threading.Tasks.Task<string> RequestCombinedUploadReportForDateAsync(string ServiceKey, string Date) {
            return base.Channel.RequestCombinedUploadReportForDateAsync(ServiceKey, Date);
        }
        
        public string[] RequestCreditDataReport(string ServiceKey, string FileToken) {
            return base.Channel.RequestCreditDataReport(ServiceKey, FileToken);
        }
        
        public System.Threading.Tasks.Task<string[]> RequestCreditDataReportAsync(string ServiceKey, string FileToken) {
            return base.Channel.RequestCreditDataReportAsync(ServiceKey, FileToken);
        }
        
        public string RequestAVSReport(string ServiceKey, string FileToken) {
            return base.Channel.RequestAVSReport(ServiceKey, FileToken);
        }
        
        public System.Threading.Tasks.Task<string> RequestAVSReportAsync(string ServiceKey, string FileToken) {
            return base.Channel.RequestAVSReportAsync(ServiceKey, FileToken);
        }
        
        public string RequestPayNowInvoice(string serviceKey, string fileToken) {
            return base.Channel.RequestPayNowInvoice(serviceKey, fileToken);
        }
        
        public System.Threading.Tasks.Task<string> RequestPayNowInvoiceAsync(string serviceKey, string fileToken) {
            return base.Channel.RequestPayNowInvoiceAsync(serviceKey, fileToken);
        }
        
        public string[] IsValidServiceKey(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode) {
            return base.Channel.IsValidServiceKey(MethodKey, ServiceKey, InstructionCode, SofwareVendorCode);
        }
        
        public System.Threading.Tasks.Task<string[]> IsValidServiceKeyAsync(string MethodKey, string ServiceKey, string InstructionCode, int SofwareVendorCode) {
            return base.Channel.IsValidServiceKeyAsync(MethodKey, ServiceKey, InstructionCode, SofwareVendorCode);
        }
        
        public string[] AccountServiceKeys(string MethodKey, string AccountNo, int SoftwareVendorCode) {
            return base.Channel.AccountServiceKeys(MethodKey, AccountNo, SoftwareVendorCode);
        }
        
        public System.Threading.Tasks.Task<string[]> AccountServiceKeysAsync(string MethodKey, string AccountNo, int SoftwareVendorCode) {
            return base.Channel.AccountServiceKeysAsync(MethodKey, AccountNo, SoftwareVendorCode);
        }
        
        public BatchFileUpload.BatchUploadClient.MerchantStatementSourceStatusResponse MerchantStatementSourceStatus(string ServiceKey, string Date) {
            return base.Channel.MerchantStatementSourceStatus(ServiceKey, Date);
        }
        
        public System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.MerchantStatementSourceStatusResponse> MerchantStatementSourceStatusAsync(string ServiceKey, string Date) {
            return base.Channel.MerchantStatementSourceStatusAsync(ServiceKey, Date);
        }
        
        public string RequestDebitBatchUnauthorised(string ServiceKey, string Date) {
            return base.Channel.RequestDebitBatchUnauthorised(ServiceKey, Date);
        }
        
        public System.Threading.Tasks.Task<string> RequestDebitBatchUnauthorisedAsync(string ServiceKey, string Date) {
            return base.Channel.RequestDebitBatchUnauthorisedAsync(ServiceKey, Date);
        }
        
        public string RetrieveBatchStatus(string ServiceKey) {
            return base.Channel.RetrieveBatchStatus(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveBatchStatusAsync(string ServiceKey) {
            return base.Channel.RetrieveBatchStatusAsync(ServiceKey);
        }
        
        public string RetrieveUnauthorisedBatches(string ServiceKey) {
            return base.Channel.RetrieveUnauthorisedBatches(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveUnauthorisedBatchesAsync(string ServiceKey) {
            return base.Channel.RetrieveUnauthorisedBatchesAsync(ServiceKey);
        }
        
        public string RequestBatchAuthorise(string ServiceKey, System.Guid BatchIndicator, bool SendEmail, string FromName, string FromAddress, bool SendSMS, bool ReleaseFunds, bool BankTransfer) {
            return base.Channel.RequestBatchAuthorise(ServiceKey, BatchIndicator, SendEmail, FromName, FromAddress, SendSMS, ReleaseFunds, BankTransfer);
        }
        
        public System.Threading.Tasks.Task<string> RequestBatchAuthoriseAsync(string ServiceKey, System.Guid BatchIndicator, bool SendEmail, string FromName, string FromAddress, bool SendSMS, bool ReleaseFunds, bool BankTransfer) {
            return base.Channel.RequestBatchAuthoriseAsync(ServiceKey, BatchIndicator, SendEmail, FromName, FromAddress, SendSMS, ReleaseFunds, BankTransfer);
        }
        
        public string RequestMandateData(string ServiceKey) {
            return base.Channel.RequestMandateData(ServiceKey);
        }
        
        public System.Threading.Tasks.Task<string> RequestMandateDataAsync(string ServiceKey) {
            return base.Channel.RequestMandateDataAsync(ServiceKey);
        }
        
        public string RetrieveMandateData(string ServiceKey, string FileToken) {
            return base.Channel.RetrieveMandateData(ServiceKey, FileToken);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveMandateDataAsync(string ServiceKey, string FileToken) {
            return base.Channel.RetrieveMandateDataAsync(ServiceKey, FileToken);
        }
        
        public string RetrieveMandatePDF(string ServiceKey, string FileToken) {
            return base.Channel.RetrieveMandatePDF(ServiceKey, FileToken);
        }
        
        public System.Threading.Tasks.Task<string> RetrieveMandatePDFAsync(string ServiceKey, string FileToken) {
            return base.Channel.RetrieveMandatePDFAsync(ServiceKey, FileToken);
        }
        
        public BatchFileUpload.BatchUploadClient.AddMandateResponse AddMandate(
                    string ServiceKey, 
                    string AccountReference, 
                    string MandateName, 
                    decimal MandateAmount, 
                    bool IsConsumer, 
                    string FirstName, 
                    string Surname, 
                    string TradingName, 
                    string RegistrationNumber, 
                    string RegisteredName, 
                    string MobileNumber, 
                    BatchFileUpload.BatchUploadClient.MandateOptionsMandateDebitFrequency DebitFrequency, 
                    int CommencementMonth, 
                    string CommencementDay, 
                    string AgreementDate, 
                    string AgreementReferenceNumber, 
                    System.Nullable<int> CancellationNoticePeriod, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsMandatePublicHolidayOption> PublicHolidayOption, 
                    string Notes, 
                    string Field1, 
                    string Field2, 
                    string Field3, 
                    string Field4, 
                    string Field5, 
                    string Field6, 
                    string Field7, 
                    string Field8, 
                    string Field9, 
                    System.Nullable<bool> AllowVariableDebitAmounts, 
                    System.Nullable<int> BankDetailType, 
                    string BankAccountName, 
                    string BankAccountNumber, 
                    string BranchCode, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsBankAccountType> BankAccountType, 
                    string CreditCardToken, 
                    System.Nullable<int> CreditCardType, 
                    System.Nullable<int> ExpiryMonth, 
                    System.Nullable<int> ExpiryYear, 
                    System.Nullable<bool> IsIdNumber, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsTitle> Title, 
                    string EmailAddress, 
                    string PhoneNumber, 
                    string DateOfBirth, 
                    string DecemberDebitDay, 
                    string DebitMasterfileGroup, 
                    string PhysicalAddressLine1, 
                    string PhysicalAddressLine2, 
                    string PhysicalAddressLine3, 
                    string PhysicalSuburb, 
                    string PhysicalCity, 
                    string PhysicalProvince, 
                    string PhysicalPostalCode, 
                    System.Nullable<bool> MandateActive, 
                    System.Nullable<bool> RequestAVS, 
                    string AVSCheckNumber) {
            return base.Channel.AddMandate(ServiceKey, AccountReference, MandateName, MandateAmount, IsConsumer, FirstName, Surname, TradingName, RegistrationNumber, RegisteredName, MobileNumber, DebitFrequency, CommencementMonth, CommencementDay, AgreementDate, AgreementReferenceNumber, CancellationNoticePeriod, PublicHolidayOption, Notes, Field1, Field2, Field3, Field4, Field5, Field6, Field7, Field8, Field9, AllowVariableDebitAmounts, BankDetailType, BankAccountName, BankAccountNumber, BranchCode, BankAccountType, CreditCardToken, CreditCardType, ExpiryMonth, ExpiryYear, IsIdNumber, Title, EmailAddress, PhoneNumber, DateOfBirth, DecemberDebitDay, DebitMasterfileGroup, PhysicalAddressLine1, PhysicalAddressLine2, PhysicalAddressLine3, PhysicalSuburb, PhysicalCity, PhysicalProvince, PhysicalPostalCode, MandateActive, RequestAVS, AVSCheckNumber);
        }
        
        public System.Threading.Tasks.Task<BatchFileUpload.BatchUploadClient.AddMandateResponse> AddMandateAsync(
                    string ServiceKey, 
                    string AccountReference, 
                    string MandateName, 
                    decimal MandateAmount, 
                    bool IsConsumer, 
                    string FirstName, 
                    string Surname, 
                    string TradingName, 
                    string RegistrationNumber, 
                    string RegisteredName, 
                    string MobileNumber, 
                    BatchFileUpload.BatchUploadClient.MandateOptionsMandateDebitFrequency DebitFrequency, 
                    int CommencementMonth, 
                    string CommencementDay, 
                    string AgreementDate, 
                    string AgreementReferenceNumber, 
                    System.Nullable<int> CancellationNoticePeriod, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsMandatePublicHolidayOption> PublicHolidayOption, 
                    string Notes, 
                    string Field1, 
                    string Field2, 
                    string Field3, 
                    string Field4, 
                    string Field5, 
                    string Field6, 
                    string Field7, 
                    string Field8, 
                    string Field9, 
                    System.Nullable<bool> AllowVariableDebitAmounts, 
                    System.Nullable<int> BankDetailType, 
                    string BankAccountName, 
                    string BankAccountNumber, 
                    string BranchCode, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsBankAccountType> BankAccountType, 
                    string CreditCardToken, 
                    System.Nullable<int> CreditCardType, 
                    System.Nullable<int> ExpiryMonth, 
                    System.Nullable<int> ExpiryYear, 
                    System.Nullable<bool> IsIdNumber, 
                    System.Nullable<BatchFileUpload.BatchUploadClient.MandateOptionsTitle> Title, 
                    string EmailAddress, 
                    string PhoneNumber, 
                    string DateOfBirth, 
                    string DecemberDebitDay, 
                    string DebitMasterfileGroup, 
                    string PhysicalAddressLine1, 
                    string PhysicalAddressLine2, 
                    string PhysicalAddressLine3, 
                    string PhysicalSuburb, 
                    string PhysicalCity, 
                    string PhysicalProvince, 
                    string PhysicalPostalCode, 
                    System.Nullable<bool> MandateActive, 
                    System.Nullable<bool> RequestAVS, 
                    string AVSCheckNumber) {
            return base.Channel.AddMandateAsync(ServiceKey, AccountReference, MandateName, MandateAmount, IsConsumer, FirstName, Surname, TradingName, RegistrationNumber, RegisteredName, MobileNumber, DebitFrequency, CommencementMonth, CommencementDay, AgreementDate, AgreementReferenceNumber, CancellationNoticePeriod, PublicHolidayOption, Notes, Field1, Field2, Field3, Field4, Field5, Field6, Field7, Field8, Field9, AllowVariableDebitAmounts, BankDetailType, BankAccountName, BankAccountNumber, BranchCode, BankAccountType, CreditCardToken, CreditCardType, ExpiryMonth, ExpiryYear, IsIdNumber, Title, EmailAddress, PhoneNumber, DateOfBirth, DecemberDebitDay, DebitMasterfileGroup, PhysicalAddressLine1, PhysicalAddressLine2, PhysicalAddressLine3, PhysicalSuburb, PhysicalCity, PhysicalProvince, PhysicalPostalCode, MandateActive, RequestAVS, AVSCheckNumber);
        }
    }
}
